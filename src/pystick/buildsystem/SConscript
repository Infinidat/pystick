# -*- python -*-
import SCons.Errors

import cenv
from utils import is_building

Import('env')

AddOption('--vars', dest='vars', type='string', nargs=1, action='store', metavar='FILE', help='Variables file to use')
vars = cenv.init_global_variables(GetOption('vars'), ARGUMENTS)
env = SConscript('vars.scons', exports='env')
vars.Update(env, ARGUMENTS)
env.MergeFlags(env['XFLAGS'])


if env.get('BUILD_PATH') and env.get('PYTHON_SOURCE_PATH'):
    build_dir = Dir(env['BUILD_PATH']).abspath
    env.SConsignFile(Dir(build_dir).File('sconsign').path)

    env, pyconfig_defines = SConscript('configure.scons', exports='env build_dir')

    env.Append(CPPPATH=["#Include", build_dir])
    env.Repository(env['PYTHON_SOURCE_PATH'])

    # These kwargs will get passed to child scripts:
    default_sconscript_kwargs = dict(exports='env build_dir pyconfig_defines', variant_dir=build_dir, duplicate=False)

    # configure stage:
    pyconfig = env.SConscript('pyconfig.scons', **default_sconscript_kwargs)
    makefile = env.SConscript('makefile.scons', **default_sconscript_kwargs)
    configure = Alias('configure', [pyconfig, makefile])

    # build standard C modules:
    env = env.SConscript('standard_c_modules.scons', **default_sconscript_kwargs)

    # use list of external modules:
    if env.get('EXTERNAL_C_MODULES_FILE'):
        sconscript_kwargs = default_sconscript_kwargs.copy()
        sconscript_kwargs.update(variant_dir=Dir(build_dir).Dir('external_c_modules').abspath)
        env = env.SConscript('external_c_modules/SConscript', **sconscript_kwargs)

    # Create Modules/config.c with all the C modules
    config_c = SConscript('finalize_c_modules.scons', **default_sconscript_kwargs)

    # Create a libpython that contains all the core python code.
    libpython, libpython_objects = env.SConscript('libpython.scons', **default_sconscript_kwargs)
    default_sconscript_kwargs['exports'] += ' libpython libpython_objects'

    # Create a "bare bones" Python that doesn't freeze any module, and also _sysconfigdata.py files.
    bare_python = SConscript('barepython.scons', **default_sconscript_kwargs)
    default_sconscript_kwargs['exports'] += ' bare_python'
elif is_building():
    print("Error: to build you have to pass BUILD_PATH and PYTHON_SOURCE_PATH either in command line or a vars file (--vars)")




# # Build freeze modules for Python's stdlib
# freeze_modules = SConscript("freeze_stdlib.scons", **default_sconscript_kwargs)
# default_sconscript_kwargs['exports'] += ' freeze_modules'

# # Freeze all the eggs we need
# freeze_modules.extend(SConscript("external_eggs.scons", **default_sconscript_kwargs))

# # Finalize freezing by creating the import file that declares PyImport_FrozenModules
# freeze_modules = SConscript("finalize_freeze.scons", **default_sconscript_kwargs)

# # Build a full Python executable containing all the frozen modules
# python = SConscript('python.scons', **default_sconscript_kwargs)

# # Pack a full Python library that can later be used by other projects
# libfullpython = SConscript('libfullpython.scons', **default_sconscript_kwargs)

# TODO: help
Help("""
type:
 scons configure
""")
Help("Variables you can set either from command line or by using the --vars=file option:\n")
Help(vars.GenerateHelpText(env))