# -*- python -*-
import SCons.Errors

import cenv
from modules import add_python_module_funcs_to_env
from utils import is_building

Import('env')

AddOption('--vars', dest='vars', type='string', nargs=1, action='store', metavar='FILE', help='Variables file to use')
AddOption('--dumpenv', dest='dumpenv', action='store_true', default=False, help='Dump environment')
vars = cenv.init_global_variables(GetOption('vars'), ARGUMENTS)
env = SConscript('vars.scons', exports='env')
vars.Update(env, ARGUMENTS)
env.MergeFlags(env['XFLAGS'])

def ar_command(target, source, env):
    from response_file import gen_rsp_file
    path = target[0].abspath + ".rsp"
    gen_rsp_file([File(path)],  source, env)
    from SCons.Action import CommandAction
    act = CommandAction("$AR $ARFLAGS $TARGET @{}".format(path))
    return act.execute(target, source, env)
env['ARCOM'] = ar_command


if env.get('BUILD_PATH') and env.get('PYTHON_SOURCE_PATH'):
    print("Using Python sources from {}".format(env.Dir('$PYTHON_SOURCE_PATH').abspath))

    add_python_module_funcs_to_env(env)

    # Put SCons' database in our build directory.
    env.SConsignFile('$BUILD_PATH/sconsign')

    # Mount Python sources under our project root and make sure all targets that come from these sources go to
    # our build directory.
    env.Dir('#python').addRepository(env.Dir('$PYTHON_SOURCE_PATH'))

    # Run our configure-equivalent code so we can create pyconfig.h, Makefile, etc.
    env, pyconfig_defines = env.SConscript('configure.scons', exports='env')

    # Add Python's (mounted) Include directory to our include path.
    env.Append(CPPPATH=['#python/Include', '$BUILD_PATH'])

    # # These kwargs will get passed to child scripts (less typing):
    default_sconscript_kwargs = dict(exports='env pyconfig_defines', variant_dir=env.Dir('$BUILD_PATH'), duplicate=False)

    # Configure stage: create pyconfig.h and Makefile, needed for building Python and creating _sysconfigdata.py
    pyconfig = env.SConscript('pyconfig.scons', **default_sconscript_kwargs)
    makefile = env.SConscript('makefile.scons', **default_sconscript_kwargs)
    configure = Alias('configure', [pyconfig, makefile])

    # build standard C modules:
    standard_python_c_modules = env.SConscript('standard_c_modules.scons', **default_sconscript_kwargs)

    # FIXME external C modules should not be linked into python.bare
    # use list of external modules:
    if env.get('EXTERNAL_C_MODULES_FILE'):
        external_python_c_modules = env.SConscript('external_c_modules.scons', **default_sconscript_kwargs)
        env.AppendPythonModulesConfiguration(external_python_c_modules)

    # Create Modules/config.c with all the C modules
    env.AppendPythonModulesConfiguration(standard_python_c_modules)
    config_c = SConscript('finalize_c_modules.scons', **default_sconscript_kwargs)
    default_sconscript_kwargs['exports'] += ' config_c'

    # Create a libpython that contains all the core python code.
    libpython, libpython_objects = env.SConscript('libpython.scons', **default_sconscript_kwargs)
    default_sconscript_kwargs['exports'] += ' libpython libpython_objects'

    # Create a "bare bones" Python that doesn't freeze any module, and also _sysconfigdata.py files.
    bare_python = SConscript('barepython.scons', **default_sconscript_kwargs)
    default_sconscript_kwargs['exports'] += ' bare_python'

    # # Freeze Python's stdlib modules:
    freeze_modules = SConscript("freeze_stdlib.scons", **default_sconscript_kwargs)
    default_sconscript_kwargs['exports'] += ' freeze_modules'

    if env.get('EXTERNAL_PY_MODULES_FILE'):
        freeze_modules = env.SConscript('external_py_modules.scons', **default_sconscript_kwargs)

    # Finalize freezing by creating the import file that declares PyImport_FrozenModules
    freeze_modules = SConscript("finalize_py_modules.scons", **default_sconscript_kwargs)

    # Pack a full Python library that can later be used by other projects
    libfullpython = SConscript('libfullpython.scons', **default_sconscript_kwargs)
    Alias('libfullpython', libfullpython)
    default_sconscript_kwargs['exports'] += ' libfullpython'

    # Create a full python executable for fun and games
    fullpython = SConscript('fullpython.scons', **default_sconscript_kwargs)

    if GetOption('dumpenv'):
        print(env.Dump())
elif is_building():
    print("Error: to build you have to pass BUILD_PATH and PYTHON_SOURCE_PATH either in command line or a vars file (--vars)")


# TODO: help
Help("""
type:
 scons configure
""")
Help("Variables you can set either from command line or by using the --vars=file option:\n")
Help(vars.GenerateHelpText(env))