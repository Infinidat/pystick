import re
Import("env", "freeze_modules")

def extract_module_attributes_from_freeze_file(freeze_filename):
    with open(freeze_filename, "r") as source_f:
        source = source_f.read()

    result = dict()
    for attr in ('Module', 'Code', 'Size'):
        match = re.search(r'{}:\s*(\S+)'.format(attr), source)
        if not match:
            raise Exception("failed to find {}: ... in freeze source file {}".format(attr, freeze_filename))
        result[attr] = match.group(1)
    return result

def create_freeze_import(target, source, env):
    modules = []

    for s in source:
        modules.append(extract_module_attributes_from_freeze_file(str(s)))

    if len(target) > 1:
        raise Exception("create_freeze_import only handles a single target")

    with open(str(target[0]), "w") as f:
        header = """
/* Autogenerated from finalize_freeze.scons */
#include "Python.h"
"""
        f.write(header)
        for mod in modules:
            f.write('extern unsigned char %(Code)s[];\n' % mod)

        f.write('static struct _frozen _PyImport_FrozenModules[] = {\n')
        for mod in modules:
            f.write('    {"%(Module)s", %(Code)s, %(Size)s },\n' % mod)

        f.write('    {0, 0, 0} /* sentinel */\n')
        f.write('};\n')
        f.write('struct _frozen* PyImport_FrozenModules = _PyImport_FrozenModules;\n')
    return None  # success


env = env.Clone(BUILDERS={'CreateFreezeImport': Builder(action=create_freeze_import, suffix='.c', src_suffix='.c')})

freeze_import_file = Dir("freezer").File("_freeze_import_.c")
env.CreateFreezeImport(freeze_import_file, freeze_modules)

freeze_modules.append(freeze_import_file)
Return("freeze_modules")