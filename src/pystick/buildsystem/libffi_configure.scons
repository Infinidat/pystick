# -*- python -*-
from utils import (symbol_to_define, check_c_struct_member, check_c_runs, check_c_compiles, check_c_links)

# For cross compiling, you have to manually determine the following (basically all defines that are generated by a
# CheckCRuns() call):
# WORDS_BIGENDIAN
# AC_APPLE_UNIVERSAL_BUILD

without_raw_api = False
without_structs = False
with_purify = False
with_debug = False

Import('env')
env = env.Clone(tools=['default', 'textfile'])


def check_big_endian(config):
    code = """
int main() {
    /* Are we little or big endian?  From Harbison&Steele.  */
    union {
        long int l;
        char c[sizeof (long int)];
    } u;
    u.l = 1;
    return u.c[sizeof (long int) - 1] == 1;
}
"""
    return config.CheckCRuns("Checking if words are big endian... ", code)


def configure():
   defines = dict()
    def add_int_define(key, flag, value=1):
        if flag:
            defines[key] = value
        return flag

   config = env.Configure(conf_dir=Dir('.sconf_temp'), log_file=Dir('build').File('libffi.config.log'),
                          custom_tests=dict(
                                        CheckCStructMember=check_c_struct_member,
                                        CheckCRuns=check_c_runs,
                                        CheckCCompiles=check_c_compiles,
                                        CheckCLinks=check_c_links))

# /* fficonfig.h.in.  Generated from configure.ac by autoheader.  */

# /* Define if building universal (internal helper macro) */
# #undef AC_APPLE_UNIVERSAL_BUILD

    # TODO: CRAY_STACKSEG_END

# /* Define to 1 if using `alloca.c'. */
# #undef C_ALLOCA

# /* Define to the flags needed for the .section .eh_frame directive. */
# #undef EH_FRAME_FLAGS

    if with_debug:
        defines['FFI_DEBUG'] = 1

# /* Cannot use PROT_EXEC on this target, so, we revert to alternative means */
# #undef FFI_EXEC_TRAMPOLINE_TABLE

# /* Define this if you want to enable pax emulated trampolines */
# #undef FFI_MMAP_EXEC_EMUTRAMP_PAX

    # TODO:
    # if *-apple-darwin10* | *-*-freebsd* | *-*-openbsd* | *-pc-solaris*)
    # then FFI_MMAP_EXEC_WRIT

    if without_raw_api:
        defines['FFI_NO_RAW_API'] = 1

    if without_structs:
        defines['FFI_NO_STRUCTS'] = 1

    if with_purify:
        defines['USING_PURIFY'] = 1

    for header in ('alloca.h', 'dlfcn.h', 'inttypes.h', 'memory.h', 'stdint.h', 'stdlib.h',
                   'strings.h', 'string.h', 'sys/mman.h', 'sys/stat.h', 'sys/types.h', 'unistd.h'):
        add_int_define(symbol_to_define(header), config.CheckHeader(header))

    for func in ('alloca', 'memcpy', 'mmap'):
        add_int_define(symbol_to_define(func), config.CheckFunc(func))


# /* Define if your assembler supports .ascii. */
# #undef HAVE_AS_ASCII_PSEUDO_OP

# /* Define if your assembler supports .cfi_* directives. */
# #undef HAVE_AS_CFI_PSEUDO_OP

# /* Define if your assembler supports .register. */
# #undef HAVE_AS_REGISTER_PSEUDO_OP

# /* Define if your assembler and linker support unaligned PC relative relocs.
#    */
# #undef HAVE_AS_SPARC_UA_PCREL

# /* Define if your assembler supports .string. */
# #undef HAVE_AS_STRING_PSEUDO_OP

# /* Define if your assembler supports unwind section type. */
# #undef HAVE_AS_X86_64_UNWIND_SECTION_TYPE

# /* Define if your assembler supports PC relative relocs. */
# #undef HAVE_AS_X86_PCREL


# /* Define if __attribute__((visibility("hidden"))) is supported. */
# #undef HAVE_HIDDEN_VISIBILITY_ATTRIBUTE

# /* Define if mmap with MAP_ANON(YMOUS) works. */
# #undef HAVE_MMAP_ANON

# /* Define if mmap of /dev/zero works. */
# #undef HAVE_MMAP_DEV_ZERO

# /* Define if read-only mmap of a plain file works. */
# #undef HAVE_MMAP_FILE

# /* Define if .eh_frame sections should be read-only. */
# #undef HAVE_RO_EH_FRAME



# /* Define to the sub-directory in which libtool stores uninstalled libraries. */
# #undef LT_OBJDIR

# /* Define to 1 if your C compiler doesn't accept -c and -o together. */
# #undef NO_MINUS_C_MINUS_O

    defines['SIZEOF_DOUBLE'] = config.CheckTypeSize('double')
    defines['SIZEOF_LONG_DOUBLE'] = config.CheckTypeSize('long double')
    if defines['SIZEOF_LONG_DOUBLE'] > defines['SIZEOF_DOUBLE']:
        defines['HAVE_LONG_DOUBLE'] = 1

# /* If using the C implementation of alloca, define if you know the
#    direction of stack growth for your system; otherwise it will be
#    automatically deduced at runtime.
#    STACK_DIRECTION > 0 => grows toward higher addresses
#    STACK_DIRECTION < 0 => grows toward lower addresses
#    STACK_DIRECTION = 0 => direction of growth unknown */
# #undef STACK_DIRECTION

# /* Define to 1 if you have the ANSI C header files. */
# #undef STDC_HEADERS

# /* Define if symbols are underscored. */
# #undef SYMBOL_UNDERSCORE

    add_int_define('WORDS_BIGENDIAN', check_big_endian(config))

    # TODO AC_APPLE_UNIVERSAL_BUILD
    # TODO size_t


# #ifdef HAVE_HIDDEN_VISIBILITY_ATTRIBUTE
# #ifdef LIBFFI_ASM
# #define FFI_HIDDEN(name) .hidden name
# #else
# #define FFI_HIDDEN __attribute__ ((visibility ("hidden")))
# #endif
# #else
# #ifdef LIBFFI_ASM
# #define FFI_HIDDEN(name)
# #else
# #define FFI_HIDDEN
# #endif
# #endif
   configured_env = config.Finish()
   return (configured_env, defines)

def _create_subst_dict(defines):
    result = []
    for key, val in defines.iteritems():
        result.append((r"#(\s*)undef {}\n".format(key), "#\\1define {} {}\n".format(key, val)))
    # last rule - comment out all other undefs
    result.append((r"(#\s*undef [^\n]*)\n", r"/* \1 */\n"))
    return result


if not env.GetOption('clean'):
    env, fficonfig_defines = configure()
else:
    fficonfig_defines = dict()  # Just so we'll have something

fficonfig = env.Substfile('Modules/_ctypes/libffi/fficonfig.h.in', SUBST_DICT=_create_subst_dict(fficonfig_defines))
Return('env', 'fficonfig_defines', 'fficonfig')