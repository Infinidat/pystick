Import("env config_c_path")

env = env.Clone(tools=["textfile"])

init_module_funcs = env['STATIC_PYTHON_MODULE_INIT_FUNCS']
init_func_prototypes = "\n".join("extern void init{}(void);".format(name.split('.')[-1]) for name in init_module_funcs)
init_func_refs = "\n".join('{ "%(name)s", init%(rename)s },' % dict(name=name, rename=name.split('.')[-1]) for name in init_module_funcs)
config_c_subst = {r'/\* -- ADDMODULE MARKER 1 -- \*/': init_func_prototypes,
                  r'/\* -- ADDMODULE MARKER 2 -- \*/': init_func_refs}

config_c = env.Substfile(config_c_path, '#python/Modules/config.c.in', SUBST_DICT=config_c_subst)

# We use SharedObject to force fPIC here since it can't hurt and we use it for shared objects as well as libs.
config_o = env.SharedObject(config_c, CPPDEFINES='Py_BUILD_CORE')

Return("config_o")