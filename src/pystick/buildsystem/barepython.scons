# Build a "bare bones" Python executable, without freezing stdlib and other modules into it.
# We need this bare bones Python for two things:
# 1. Create the _sysconfigdata.py module that's used by site.py
# 2. Compile .py files using this Python's code (and not scons' Python)
#
# In this script we also create config.c with all the modules that are bundled as builtin.
#
# TODO move the _sysconfigdata.py creation to a different file
import cenv
from bare_python import add_bare_python_to_env

Import("env libpython")

env = env.Clone()
env.VariantDir("python", "#python", duplicate=False)
env.Prepend(LIBS=env['PYTHON_MODULES'] + libpython)
add_bare_python_to_env(env)

# Modules/config.c is autogenerated in modules.scons
bare_python = env.Program('python.bare', ['modules/config.c', 'python/Modules/python.c', 'python/Python/frozen.c'])
Depends(bare_python, 'configure')

# TODO: refactor to a separate scons file:

modules_setup_local = Dir('Modules').File('Setup.local')
env.Command(modules_setup_local, [], Touch("$TARGET"))

# FIXME version
# Don't get confused by the 'build' directory here - it's a 'build' directory under our build directory that Python
# creates.
build_sysconfigdata_path = Dir('build').Dir('lib.platform-2.7').File('_sysconfigdata.py')
env.BarePythonCommand(build_sysconfigdata_path, modules_setup_local, '-S', '-m', 'sysconfig', '--generate-posix-vars',
                      chdir=Dir('.'))
env.Command(Dir('modules').File('_sysconfigdata.py'), build_sysconfigdata_path, Copy("$TARGET", "$SOURCE"))
Return('bare_python')